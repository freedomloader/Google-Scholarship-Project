package com.freedom.playpuzzlequizgame;

import android.app.ProgressDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.freedom.playpuzzlequizgame.helper.PrefManager;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.dynamiclinks.FirebaseDynamicLinks;
import com.google.firebase.dynamiclinks.PendingDynamicLinkData;

public class SplashActivity extends AppCompatActivity {
    LinearLayout l1;
    private static final String TAG = "SplashActivity";

    private RelativeLayout l2;
    private Button btnsub, btnContinueAsGuest;
    private Animation uptodown, downtoup;
    private Thread splashTread;
    private PrefManager prefManager;
    private FirebaseAuth mAuth;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.newsplash_layout);
        prefManager = new PrefManager(this);
        mAuth = FirebaseAuth.getInstance();

        btnsub = findViewById(R.id.buttonsub);
        btnContinueAsGuest = findViewById(R.id.continueAsGuest);
        l1 = findViewById(R.id.l1);
        l2 = findViewById(R.id.l2);
        uptodown = AnimationUtils.loadAnimation(this, R.anim.uptodown);
        downtoup = AnimationUtils.loadAnimation(this, R.anim.downtoup);
        l1.setAnimation(uptodown);
        l2.setAnimation(downtoup);

        if (prefManager.isLoginLaunch()) {
            scheduleSplashScreen();
            btnsub.setText(R.string.loading_dot);
            btnContinueAsGuest.setVisibility(View.GONE);
        }

        btnsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (btnsub.getText().toString().equals("LOADING...")) {
                    return;
                }
                Intent intent = new Intent(SplashActivity.this,
                        LoginActivity.class);
                startActivity(intent);
            }
        });

        btnContinueAsGuest.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                signAsGuest();
            }
        });
    }

    @Override
    public void onStart() {
        super.onStart();
        // Check if user is signed in (non-null) and update UI accordingly.
        FirebaseUser currentUser = mAuth.getCurrentUser();

        if (currentUser != null) {
            Intent intent = new Intent(SplashActivity.this, MainActivity.class);
            startActivity(intent);
            SplashActivity.this.finish();
        } else {
            verifySignInLink();
        }
    }

    public void verifySignInLink() {
        FirebaseDynamicLinks.getInstance()
                .getDynamicLink(getIntent())
                .addOnSuccessListener(this, new OnSuccessListener<PendingDynamicLinkData>() {
                    @Override
                    public void onSuccess(PendingDynamicLinkData pendingDynamicLinkData) {
                        // Get deep link from result (may be null if no link is found)
                        Uri deepLink = null;
                        if (pendingDynamicLinkData != null) {
                            deepLink = pendingDynamicLinkData.getLink();

                            try {

                                String emailLink = getIntent().getData().toString();

                                Uri continueUri = Uri.parse(deepLink.getQueryParameter("continueUrl"));
                                signInWithEmailLink(continueUri.getQueryParameter("uid"), emailLink);
                            } catch (NullPointerException e) {
                                e.printStackTrace();
                                Toast.makeText(SplashActivity.this, "Sign In Failed", Toast.LENGTH_LONG).show();
                            }
                        }
                    }
                })
                .addOnFailureListener(this, new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.w(TAG, "getDynamicLink:onFailure", e);
                    }
                });
    }

    ProgressDialog dialog;
    // email - Retrieve this from wherever you stored it
    private void signInWithEmailLink(String email, String emailLink) {
        FirebaseAuth auth = FirebaseAuth.getInstance();
        // Confirm the link is a sign-in with email link.
        if (auth.isSignInWithEmailLink(emailLink)) {

            dialog = new ProgressDialog(this);
            dialog.setMessage("Authenticating...");
            dialog.show();
            // The client SDK will parse the code from the link for you.

//            auth.signInWithEmailLink(email, emailLink)
            mAuth.createUserWithEmailAndPassword(email, prefManager.getKeyPass())
                    .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                        @Override
                        public void onComplete(@NonNull Task<AuthResult> task) {
                            dialog.dismiss();
                            if (task.isSuccessful()) {
                                // Sign in success, update UI with the signed-in user's information
                                Log.d(TAG, "createUserWithEmail:success");

                                Intent intent = new Intent(SplashActivity.this, MainActivity.class);
                                startActivity(intent);
                                SplashActivity.this.finish();
                            } else {
                                // If sign in fails, display a message to the user.
                                Log.w(TAG, "createUserWithEmail:failure", task.getException());
                                Toast.makeText(SplashActivity.this, "Error can't sing in account", Toast.LENGTH_LONG).show();
                            }
                        }
                    });
        }
    }

    private void signAsGuest() {
        prefManager.signInDefault(true);
        Intent intent = new Intent(SplashActivity.this, MainActivity.class);
        startActivity(intent);
        SplashActivity.this.finish();
    }

    private long getSplashScreenDuration() {
        if (prefManager.isLoginLaunch()) {
            // If the user has an account, make it slow (> 3 seconds) and set flag to false

            SharedPreferences spN = PreferenceManager.getDefaultSharedPreferences(this);
            spN.edit().putStr